#
# File       : blktrace.conf    ; blktrace configuration file.
# Location(s): ~/.blktrace/     ; (optional) account defaults
#              ./               ; (optional) current blktrace data defaults
#                               ;
#                               ; First the account location is checked and loaded, then the local copy.  The local copy
#                               ; can override account level defaults.  Neither file is required and if not present then
#                               ; in program defaults are used. Expectations are an account level default would be setup
#                               ; for general configuration information, e.g. dropping or increasing the stripe_mult for
#                               ; disk access bucket size.  And the local configuration file would include tweaks for that
#                               ; if necessary plus any group definitions.
#
#
# stripe_mult=128		; blktrace parse has a fixed 128KiB 'stripe' size, this specifies how many stripes should 
#                               ; be grouped into a disk "bucket".  Each "bucket" is filled with any io performed in that
#                               ; bucket, and number, type (read v write), Q2C times, all accumulated in the bucket. Also
#                               ; seeks into/out-of the bucket are tracked.  Tracking is at 'C'ompletion event time so 
#                               ; should more closely approximate storage execution order -- but since a bunch of io is
#                               ; likely being done in parallel across different physical members of the host LUN it won't
#                               ; and isn't expected to be dead on accurate. Uncomment the following line and change the
#                               ; multiplier for current use.
##stripe_mult=128
#
##io_count_threshold=3          ; for single device, buckets with this or fewer r+w io present are skipped on output
##group_io_count_threshold=8    ; for grouped device sets, buckets with this or fewer r+w io present are skipped on output
#
##noreset_on_requeue=0          ; normally, the dispatch time in the event is reset upon each requeue event for the io
#                               ; and this results in Q2D including any D2D time associated with requeues.  Setting this
#                               ; to 1 (on), changes the behavior to Q2D is to first dispatch and D2D time is added to the
#                               ; D2C time column.  The setting of this option is ignored if 'include_drd' option, below,
#                               ; is turned on.  This is the same as the -R flag, but allows a user to configure their
#                               ; desired placement of D2D time (Q2D or D2C) separately from the shared blktrace_parse.bsh
#                               ; script.
#                               ;
##include_d2d=0			; if there are a significant number of requeue events, then setting this to '1' (on) 
#                               ; will change the output to include a specific D2D(ms) column within the output.  This
#                               ; column will show any time accumulated between the first 'D'ispatch event to the last
#                               ; 'D'ispatch event as a separate number rather than being included in the Q2D column
#                               ; 'Q'ueue to last 'D'ispatch event for the io in question. 
#
# allow_duplicate_completes=0,1 ; default is 1, allow duplicate completion events against the same io (at sub-BIO level
#                               ; only).  Such io will get a %Warning event output at the point where completed request
#                               ; is output.  Setting this so 0 will disallow duplicate completions and result in a %Fatal
#                               ; event output when detected.
#
# merged_event_debug=0,1        ; default is 0, do not output event list per merged io context.
#                               ;            1, output the events that were "absorbed" into this io context
#                               ;               note: this is only available if compiled with -DDEBUG
#                               ;               note: see [merged.1] notes below for sample output.
#
# exceptions_inhibit=0,1        ; default is 0, do not inhibit output to the *.merged.exceptions file
#                               ;            1, do not create *.merged.exceptions and do not log event exceptions
#                               ; In the course of processing events, some events will be marked as exceptions --
#                               ; for example a 'C' event that happens that cannot be matched to a io context would
#                               ; be so marked and output to the *.merged.exceptions file. This file therefore ends
#                               ; up containing events or other ouput related to non-nominal conditions.  These events
#                               ; then are available to perusal for debug purposes or to validate unusual event stream
#                               ; circumstances.
#                               ; See [exceptions.1] notes below.
#
#
# base_seconds=number		; this establishes a positive number of seconds as a base line for SEC end-of-second
#                               ; summary block to allow a manual alignment to wall clock or iostat time.  Eg.
#                               ; #Time    Device            r/s      w/s     rkB/s     wkB/s   rrqm/s   wrqm/s  %rrqm  %wrqm r_await w_await aqu-sz rareq-sz wareq-sz   svctm  %util
#                               ; 12:04:15 dm-11            0.00  1113.00      0.00 1123872.00     0.00     0.00   0.00   0.00    0.00    1.38   1.54     0.00  1009.77    0.90 100.00
#                               ; 12:04:16 dm-11            0.00  1096.00      0.00 1107584.00     0.00     0.00   0.00   0.00    0.00    1.40   1.53     0.00  1010.57    0.91 100.00
#                               ; 12:04:17 dm-11            1.00 108316.00     16.00 868028.00     0.00     0.00   0.00   0.00    1.00    0.36  39.08    16.00     8.01    0.01  88.30
#                               ; >> align SEC to here at 04:18
#                               ; 12:04:18 dm-11            0.00 236836.00      0.00 947300.00     0.00     0.00   0.00   0.00    0.00    0.28  65.67     0.00     4.00    0.00 100.10
#                               ;
#                               ; #SEC@04:16|  11272      0  11272|  981956       0  981956|  174.23   5.6 128 |     0.41  99% |     0.00   0% |     0.41  99% |   0.07 |  83.36 |...
#                               ; #SEC@04:17| 228620      1 228619|  914492      16  914476|    8.00  65.5 128 |     0.29  99% |     0.56  99% |     0.29  99% |   0.00 |  99.89 |...
#                               ; >>> set offset seconds to seconds value so instead of this being 00:19 its 4:18 which is closely aligned with the companion iostats data above
#                               ; #SEC@04:18| 239063      0 239063|  956252       0  956252|    8.00  46.0 128 |     0.19  99% |     0.00   0% |     0.19  99% |   0.00 | 100.00 |...
#                               ; #SEC@04:19| 239594      0 239594|  958376       0  958376|    8.00  44.3  91 |     0.18  99% |     0.00   0% |     0.18  99% |   0.00 | 100.00 |...
#                               ; 
# group <name>: device1, device2, ...
#                               ; define a group with name <name>.  the parser outputs a binary file at the end of its
#                               ; processing named <device>.blktrace.summary.bin.  It then searches for groups where
#                               ; its device name is present.  It will attempt to find all other *.bin files associated
#                               ; with the group and add then to the current summary data.  Once all available ones 
#                               ; are read in, a summary report is output as <group>.blktrace.summary.out -- the summary
#                               ; will highlight which <devices> were found and include and which ones were not.  There
#                               ; can be multiple groups found with the current device name, in which case multiple 
#                               ; reports will be output - one for each applicable group.  This is done so that in corner
#                               ; cases where a lot of disks are traced for a filesystem and that filesystem is across
#                               ; multiple host luns you can create two groups that include the device: one host lun based
#                               ; with all paths, and a second one for the filesystem with luns from all paths of the 
#                               ; different luns the filesystem is spread over. 
#                               ;
#                               ; look for output in <name>.blktrace.group.out
#                               ;
#
##group mpatha : sda, sdb, sdc, sdd
##group optdata: sda, sdb, sdc, sdd, sde, sdf, sdg, sdh
#
#
#Example:
#              stripe_mult=32
#       io_count_threshold=3
# group_io_count_threshold=8
# group alldevs : sdqo sdql sdqh sdqd sdnl sdnh sdnd sdmy sdkf sdkc sdjy sdju sdha sdgx sdgv sdgp sdaxz sdaxv sdaxr sdaxo sdauw sdaus sdauo sdauj sdart sdarp sdarl sdari sdanp sdanl sdani sdane 
# group lun83   : sdha sdkf sdnl sdqo sdanp sdart sdauw sdaxz
# group lun82   : sdgx sdkc sdnh sdql sdanl sdarp sdaus sdaxv
# group lun81   : sdgv sdjy sdnd sdqh sdani sdarl sdauo sdaxr
# group lun80   : sdgp sdju sdmy sdqd sdane sdari sdauj sdaxo
#
# NOTES:
# [merged.1]
# when 'merged_event_debug=1' is specified, and the program is compiled with -DDEBUG, then the event list
# "absorbed" into the io context is output following the one-liner of merged event information as so:
#
#  261:230  25.749492288  76.3501     77.216276    254.649471 % 76    331.865747   1     2824 W       8     2196680032         12528 [flush-253:2]            2   0
#     1: [00428410] '  8,0    1    21580    25.749492100  2824  A   W 2196680032 + 8 <- (8,2) 2195653984'         ; [06159] 
#     2: [00428411] '  8,0    1    21581    25.749492288  2824  Q   W 2196680032 + 8 [flush-253:2]'               ; [06337] 
#     3: [00428412] '  8,0    1    21582    25.749493226  2824  G   W 2196680032 + 8 [flush-253:2]'               ; [07083] 
#     4: [00428413] '  8,0    1    21583    25.749493582  2824  I   W 2196680032 + 8 [flush-253:2]'               ; [07214] 
#     5: [00428953] '  8,0    3    61318    25.825840103 15555  D   W 2196680032 + 8 [java]'                      ; [07369] 
#     6: [00428954] '  8,0    3    61319    25.825841302 15555  R   W 2196680032 + 8 [0]'                         ; [07531] 
#     7: [00428955] '  8,0    3    61320    25.825841460 15555  I   W 2196680032 + 8 [java]'                      ; [07214] 
#     8: [00428956] '  8,0    3    61321    25.825841793 15555  D   W 2196680032 + 8 [java]'                      ; [07369] 
#     9: [00428957] '  8,0    3    61322    25.825842051 15555  R   W 2196680032 + 8 [0]'                         ; [07531] 
#    10: [00428958] '  8,0    3    61323    25.825842417 15555  I   W 2196680032 + 8 [java]'                      ; [07214] 
#    11: [00428960] '  8,0    2    66390    25.826708564 15320  D   W 2196680032 + 8 [java]'                      ; [07369] 
#    12: [00431644] '  8,0    4    80117    26.081358035     0  C   W 2196680032 + 8 [0]'                         ; [07986] 
#    
# This can be used for debug and illustration purposes to provides of the data to show which events contributed
# the the output line.  Normally this output is turned off by default unless explicitly turned on within blktrace.conf
# file.
#
# [exceptions.1]
#
# Here are some example events that were marked as exceptions.  In this case because they did not fully parse --
# they are all missing the necessary sector:length inforamtion.  As such they are ignored -- the event contains
# insufficient information to match them to an existing io context.
#    0: [00697738] '  8,0    6    44457    46.305815412 22205  G   N [timeout]'                                  ; [02831] event evtflags has EXCEPTION set
#    0: [00697740] '  8,0    6    44459    46.305819289 22205  I   R 512 (85 08 0e 00 00 00 01 00 00 00 00 00 00 40 ec 00 ..) [timeout]'   ; [02831] event evtflags has EXCEPTION set
#    0: [00697741] '  8,0    6    44460    46.305819915 22205  D   R 512 (85 08 0e 00 00 00 01 00 00 00 00 00 00 40 ec 00 ..) [timeout]'   ; [02831] event evtflags has EXCEPTION set
#    0: [00697991] '  8,0    3    98877    46.363246915 22207  G   N [smartctl]'                                 ; [02831] event evtflags has EXCEPTION set
#    0: [00697993] '  8,0    3    98879    46.363251178 22207  I   R 36 (12 00 00 00 24 00 ..) [smartctl]'       ; [02831] event evtflags has EXCEPTION set
#    0: [00697994] '  8,0    3    98880    46.363251926 22207  D   R 36 (12 00 00 00 24 00 ..) [smartctl]'       ; [02831] event evtflags has EXCEPTION set
#    0: [00697996] '  8,0   10    62863    46.363482958 22207  G   N [smartctl]'                                 ; [02831] event evtflags has EXCEPTION set
#
# Here are examples of exception events -- "orphan" 'C'ompletion events.  These happen near the top of the input
# file and there are no preceeding events for the same sector:length context to match against.  These can only
# be discarded and so are called out here within exceptions.
#   0: [00000003] '  8,0    4        1     0.000000000     0  C   W 2174559344 + 8 [0]'                         ; [05531] detected as orphan event, skipped ghost request creation
#   0: [00000004] '  8,0    7        1     0.001534594     0  C  WS 2174559816 + 8 [0]'                         ; [05531] detected as orphan event, skipped ghost request creation
#   0: [00000005] '  8,0    7        2     0.003650072     0  C   W 2174560360 + 8 [0]'                         ; [05531] detected as orphan event, skipped ghost request creation
#
